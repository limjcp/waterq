// schema.prisma

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// Represents a type of service (e.g., Customer Welfare, New Service Application, Payment)
model Service {
  id           String        @id @default(cuid())
  code         String        @unique
  name         String
  counters     Counter[]
  tickets      QueueTicket[]
  serviceTypes ServiceType[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

// Each counter is physically a window/desk and is linked to a Service.
model Counter {
  id        String        @id @default(cuid())
  name      String
  code      String        @unique
  serviceId String
  service   Service       @relation(fields: [serviceId], references: [id])
  tickets   QueueTicket[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  User User[]
}

// Represents each ticket in the queue
model QueueTicket {
  id            String       @id @default(cuid())
  ticketNumber  Int
  prefix        String
  status        QueueStatus  @default(PENDING)
  // Each ticket is created for a particular service.
  serviceId     String
  service       Service      @relation(fields: [serviceId], references: [id])
  // Once called, a ticket is assigned to a counter.
  counterId     String?
  counter       Counter?     @relation(fields: [counterId], references: [id])
  // Add service type relation
  serviceTypeId String?
  serviceType   ServiceType? @relation(fields: [serviceTypeId], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  // Add fields to track serving start and end times
  servingStart  DateTime?
  servingEnd    DateTime?
  isPrioritized Boolean      @default(false)
}

// Represents a user in the system. Staff members (role: staff) can be assigned to a counter.
model User {
  id                String    @id @default(cuid())
  firstName         String
  middleName        String?
  lastName          String
  email             String    @unique
  image             String?
  password          String
  username          String    @unique
  role              Role[]    @default([unverified])
  // If the user is a staff, they can be assigned to a specific counter.
  assignedCounterId String?
  assignedCounter   Counter?  @relation(fields: [assignedCounterId], references: [id])
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  lastLogin         DateTime?
}

// Defines the possible states of a ticket.
enum QueueStatus {
  PENDING
  CALLED
  SERVING
  SERVED
  LAPSED
  CANCELLED
  RETURNING
}

// Defines the user roles.
enum Role {
  unverified
  staff
  admin
  archived
}

// New model for service types
model ServiceType {
  id        String        @id @default(cuid())
  name      String
  code      String        @unique
  serviceId String // Link to specific service
  service   Service       @relation(fields: [serviceId], references: [id])
  tickets   QueueTicket[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

// New model for screensaver images
model ScreensaverImage {
  id        String   @id @default(cuid())
  title     String
  imageUrl  String
  isActive  Boolean  @default(true)
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

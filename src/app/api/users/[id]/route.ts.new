import { NextRequest, NextResponse } from "next/server";
import { prisma } from "@/lib/prisma";
import bcrypt from "bcryptjs";

export const runtime = "nodejs";

// GET a single user by ID
export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  // In Next.js App Router, we can simply use the params
  // But DO NOT use const id = params.id directly
  try {
    const user = await prisma.user.findUnique({
      where: { id: params.id },
    });

    if (!user) {
      return new NextResponse(
        JSON.stringify({
          error: "User not found",
        }),
        {
          status: 404,
        }
      );
    }

    return NextResponse.json(user);
  } catch (error) {
    console.error(error);
    return new NextResponse("Server error", {
      status: 500,
    });
  }
}

// Update a user's password or assigned counter via PUT
export async function PUT(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const userId = params.id;
    const {
      password,
      assignedCounterId,
      serviceId,
    } = await request.json();

    // Prepare the update data
    const updateData: Record<string, any> = {};

    // Only include password if provided
    if (password && password.trim() !== "") {
      // Hash the password before storing
      updateData.password = await bcrypt.hash(
        password,
        10
      );
    }

    // Get the current user to check their role
    const currentUser =
      await prisma.user.findUnique({
        where: { id: userId },
        include: { supervisedService: true },
      });

    if (!currentUser) {
      return NextResponse.json(
        { error: "User not found" },
        { status: 404 }
      );
    }

    // Handle staff assignment to counter
    if (currentUser.role.includes("staff")) {
      // If assignedCounterId is empty string, set to null (unassign)
      updateData.assignedCounterId =
        assignedCounterId === ""
          ? null
          : assignedCounterId;
    }

    // Handle supervisor assignment to service
    if (currentUser.role.includes("supervisor")) {
      // Use a transaction to handle the supervisor-service relationship
      return await prisma.$transaction(
        async (tx) => {
          // If the user was supervising a service before, remove that relationship
          if (currentUser.supervisedService) {
            await tx.service.update({
              where: {
                id: currentUser.supervisedService
                  .id,
              },
              data: { supervisorId: null },
            });
          }

          // If a new service is assigned
          if (
            serviceId &&
            serviceId.trim() !== ""
          ) {
            // Check if service already has a supervisor
            const serviceToAssign =
              await tx.service.findUnique({
                where: { id: serviceId },
                include: { supervisor: true },
              });

            if (
              serviceToAssign?.supervisor &&
              serviceToAssign.supervisor.id !==
                userId
            ) {
              return NextResponse.json(
                {
                  error:
                    "This service already has a supervisor assigned",
                },
                { status: 400 }
              );
            }

            // Assign user to the new service
            await tx.service.update({
              where: { id: serviceId },
              data: { supervisorId: userId },
            });
          }

          // Update the user record
          const updatedUser =
            await tx.user.update({
              where: { id: userId },
              data: updateData,
            });

          return NextResponse.json({
            success: true,
            user: updatedUser,
          });
        }
      );
    }

    // For non-supervisor users, simply update the user
    const updatedUser = await prisma.user.update({
      where: { id: userId },
      data: updateData,
    });

    return NextResponse.json({
      success: true,
      user: updatedUser,
    });
  } catch (error: any) {
    console.error("Error updating user:", error);
    return NextResponse.json(
      {
        error:
          error.message ||
          "Failed to update user",
      },
      { status: 500 }
    );
  }
}

// Archive a user via DELETE
export async function DELETE(
  request: Request,
  { params }: { params: { id: string } }
) {
  try {
    const userId = params.id;

    // Get the current user to check if they're a supervisor
    const currentUser =
      await prisma.user.findUnique({
        where: { id: userId },
        include: { supervisedService: true },
      });

    if (!currentUser) {
      return NextResponse.json(
        { error: "User not found" },
        { status: 404 }
      );
    }

    // If user is a supervisor, handle the service relationship
    if (
      currentUser.role.includes("supervisor") &&
      currentUser.supervisedService
    ) {
      await prisma.service.update({
        where: {
          id: currentUser.supervisedService.id,
        },
        data: { supervisorId: null },
      });
    }

    // Archive the user (instead of deleting)
    const archivedUser = await prisma.user.update(
      {
        where: { id: userId },
        data: {
          role: ["archived"],
          assignedCounterId: null,
        },
      }
    );

    return NextResponse.json({
      success: true,
      user: archivedUser,
    });
  } catch (error: any) {
    console.error("Error archiving user:", error);
    return NextResponse.json(
      {
        error:
          error.message ||
          "Failed to archive user",
      },
      { status: 500 }
    );
  }
}
